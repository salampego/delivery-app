{"version":3,"file":"static/js/912.4077ea20.chunk.js","mappings":"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","sources":["pages/History/History.jsx","pages/Main/Main.jsx","pages/Shop/Shop.jsx","pages/ShoppingCart/ShoppingCart.jsx"],"sourcesContent":["import * as yup from \"yup\";\r\nimport \"./History.css\";\r\nimport { Formik, Field, ErrorMessage } from \"formik\";\r\nimport { FindOrderList } from \"../../components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getLoadingBasket } from \"../../redux/selectors\";\r\nimport { Loader } from \"../../components/Loader/Loader\";\r\nimport { findOrder } from \"../../redux/basket/operations\";\r\n\r\nexport const History = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoad = useSelector(getLoadingBasket);\r\n\r\n  const schema = yup.object().shape({\r\n    phone: yup.string().required(),\r\n    email: yup.string().email().required(),\r\n  });\r\n\r\n  const initialValues = {\r\n    phone: \"\",\r\n    email: \"\",\r\n  };\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    const { email, phone } = values;\r\n    dispatch(findOrder({ email, phone }));\r\n    resetForm();\r\n  };\r\n\r\n  return isLoad ? (\r\n    <Loader />\r\n  ) : (\r\n    <section className=\"history\">\r\n      <div className=\"container\">\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          initialValues={initialValues}\r\n        >\r\n          {({ handleSubmit }) => (\r\n            <form className=\"history__form\" onSubmit={handleSubmit}>\r\n              <div className=\"history__form-wrapper\">\r\n                <div className=\"history__item\">\r\n                  <label className=\"history__label\" htmlFor=\"address\">\r\n                    Phone:\r\n                    <Field\r\n                      type=\"text\"\r\n                      name=\"phone\"\r\n                      className=\"history__input\"\r\n                      placeholder=\"Phone\"\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"address\"\r\n                      component=\"div\"\r\n                      className=\"error-message\"\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <div className=\"history__item\">\r\n                  <label className=\"history__label\" htmlFor=\"email\">\r\n                    Email:\r\n                    <Field\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"history__input\"\r\n                      placeholder=\"Email\"\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"email\"\r\n                      component=\"div\"\r\n                      className=\"error-message\"\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"history__submit-wrapper\">\r\n                <button type=\"submit\" className=\"history__submit-btn\">\r\n                  Search order\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n        <FindOrderList />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import { Hero } from \"../../components\";\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <>\r\n      <Hero />\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getProductById,\r\n  getProductList,\r\n} from \"../../redux/products/operations\";\r\nimport { getItem, getLoading, getMenu } from \"../../redux/selectors\";\r\nimport { Loader } from \"../../components/Loader/Loader\";\r\nimport \"./Shop.css\";\r\nimport { ProductList } from \"../../components\";\r\n\r\nexport const Shop = () => {\r\n  const dispatch = useDispatch();\r\n  const item = useSelector(getItem);\r\n  const isLoad = useSelector(getLoading);\r\n  const menu = useSelector(getMenu);\r\n\r\n  const [idRestraunt, setIdRestraunt] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(getProductList());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (idRestraunt) {\r\n      dispatch(getProductById(idRestraunt));\r\n    }\r\n  }, [idRestraunt, dispatch]);\r\n\r\n  return isLoad ? (\r\n    <Loader />\r\n  ) : (\r\n    <section className=\"shop\">\r\n      <div className=\"container\">\r\n        <div className=\"shop__wrapper\">\r\n          <ul className=\"restraunt__list\">\r\n            {item.data\r\n              ? item.data.delivery.map(({ _id, name }) => {\r\n                  return (\r\n                    <li key={_id} className=\"restraunt__item\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"restraunt__item--btn\"\r\n                        onClick={() => setIdRestraunt(_id)}\r\n                      >\r\n                        {name}\r\n                      </button>\r\n                    </li>\r\n                  );\r\n                })\r\n              : null}\r\n          </ul>\r\n\r\n          <div className=\"productlist--wrapper\">\r\n            <ProductList productMenu={menu.data} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { CredentialsForm, OrderList } from \"../../components\";\r\nimport \"./ShoppingCart.css\";\r\nimport { getBasket, getError } from \"../../redux/selectors\";\r\nimport { Toaster, toast } from \"react-hot-toast\";\r\nimport { createOrder } from \"../../redux/basket/operations\";\r\nimport { removeOrder } from \"../../redux/basket/sliceBasket\";\r\nimport { Formik } from \"formik\";\r\n\r\nexport const ShoppingCart = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(),\r\n    address: yup.string().required(),\r\n    phone: yup.string().required(),\r\n    email: yup.string().email().required(),\r\n    totalPrice: yup.number(),\r\n    date: yup.date(),\r\n    products: yup.array().of(\r\n      yup.object().shape({\r\n        name: yup.string(),\r\n        price: yup.number(),\r\n        photo: yup.string(),\r\n        quantity: yup.number(),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  };\r\n\r\n  const basket = useSelector(getBasket);\r\n  const error = useSelector(getError);\r\n  const totalPrice = basket.reduce(\r\n    (accumulator, item) => accumulator + item.price,\r\n    0\r\n  );\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    const { name, address, phone, email } = values;\r\n\r\n    const order = basket.map((item) => {\r\n      const updatedItem = { ...item };\r\n      delete updatedItem._id;\r\n      delete updatedItem.initialPrice;\r\n      return updatedItem;\r\n    });\r\n\r\n    if (totalPrice === 0) {\r\n      notifyError();\r\n      return;\r\n    }\r\n\r\n    schema\r\n      .validate({\r\n        name,\r\n        address,\r\n        phone,\r\n        email,\r\n        totalPrice,\r\n        products: order,\r\n        date: new Date().toLocaleDateString(),\r\n      })\r\n      .then(() => {\r\n        dispatch(\r\n          createOrder({\r\n            name,\r\n            address,\r\n            phone,\r\n            email,\r\n            totalPrice,\r\n            products: order,\r\n            date: new Date().toLocaleDateString(),\r\n          })\r\n        );\r\n        if (!error) {\r\n          dispatch(removeOrder());\r\n        }\r\n        resetForm();\r\n        notify();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        notifyError();\r\n      });\r\n  };\r\n\r\n  const notify = () =>\r\n    toast.success(`Your order is being processed, we will contact you soon`);\r\n\r\n  const notifyError = () => toast.error(\"Something went wrong with the order\");\r\n\r\n  return (\r\n    <section className=\"shoppingCart\">\r\n      <div className=\"container\">\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          initialValues={initialValues}\r\n        >\r\n          {({ handleSubmit }) => (\r\n            <form className=\"basket__form\" onSubmit={handleSubmit}>\r\n              <div className=\"basket__form-wrapper\">\r\n                <CredentialsForm />\r\n                <OrderList />\r\n              </div>\r\n              <div className=\"basket__totalprice\">\r\n                <p>Total price: {Number(totalPrice).toFixed(2)}$</p>\r\n                <button type=\"submit\" className=\"basket__submit-btn\">\r\n                  Pay for the order\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <Toaster />\r\n    </section>\r\n  );\r\n};\r\n"],"names":["History","dispatch","useDispatch","isLoad","useSelector","getLoadingBasket","schema","yup","shape","phone","required","email","_jsx","Loader","className","children","_jsxs","Formik","validationSchema","onSubmit","values","_ref","resetForm","findOrder","initialValues","_ref2","handleSubmit","htmlFor","Field","type","name","placeholder","ErrorMessage","component","FindOrderList","Main","_Fragment","Hero","Shop","item","getItem","getLoading","menu","getMenu","_useState","useState","_useState2","_slicedToArray","idRestraunt","setIdRestraunt","useEffect","getProductList","getProductById","data","delivery","map","_id","onClick","ProductList","productMenu","ShoppingCart","address","totalPrice","date","products","of","price","photo","quantity","basket","getBasket","error","getError","reduce","accumulator","notify","toast","notifyError","order","updatedItem","_objectSpread","initialPrice","validate","Date","toLocaleDateString","then","createOrder","removeOrder","catch","console","CredentialsForm","OrderList","Number","toFixed","Toaster"],"sourceRoot":""}