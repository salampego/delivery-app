{"version":3,"file":"static/js/711.caacc03d.chunk.js","mappings":"oQA+HA,EArHqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,QAASJ,EAAAA,KAAaG,WACtBE,MAAOL,EAAAA,KAAaG,WACpBG,MAAON,EAAAA,KAAaM,QAAQH,WAC5BI,WAAYP,EAAAA,KACZQ,KAAMR,EAAAA,KACNS,SAAUT,EAAAA,KAAYU,GACpBV,EAAAA,KAAaC,MAAM,CACjBC,KAAMF,EAAAA,KACNW,MAAOX,EAAAA,KACPY,MAAOZ,EAAAA,KACPa,SAAUb,EAAAA,UAYVc,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBX,EAAaO,EAAOK,QACxB,SAACC,EAAaC,GAAI,OAAKD,EAAcC,EAAKV,KAAK,GAC/C,GAoDIW,EAAS,WAAH,OACVC,EAAAA,GAAAA,QAAc,0DAA2D,EAErEC,EAAc,WAAH,OAASD,EAAAA,GAAAA,MAAY,sCAAuC,EAE7E,OACEE,EAAAA,EAAAA,MAAA,WAASC,UAAU,eAAcC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,iBAAkB/B,EAClBgC,SA3DS,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAClBhC,EAAgC8B,EAAhC9B,KAAME,EAA0B4B,EAA1B5B,QAASC,EAAiB2B,EAAjB3B,MAAOC,EAAU0B,EAAV1B,MAExB6B,EAAQrB,EAAOsB,KAAI,SAACf,GACxB,IAAMgB,GAAWC,EAAAA,EAAAA,GAAA,GAAQjB,GAGzB,cAFOgB,EAAYE,WACZF,EAAYG,aACZH,CACT,IAEmB,IAAf9B,EAKJR,EACG0C,SAAS,CACRvC,KAAAA,EACAE,QAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAE,SAAU0B,EACV3B,MAAM,IAAIkC,MAAOC,uBAElBC,MAAK,WACJ/C,GACEgD,EAAAA,EAAAA,GAAY,CACV3C,KAAAA,EACAE,QAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAE,SAAU0B,EACV3B,MAAM,IAAIkC,MAAOC,wBAGhB1B,GACHpB,GAASiD,EAAAA,EAAAA,OAEXZ,IACAZ,GACF,IACCyB,OAAM,SAAC9B,GACN+B,QAAQ/B,MAAMA,GACdO,GACF,IAnCAA,GAoCJ,EAaQyB,cA1Ec,CACpB/C,KAAM,GACNE,QAAS,GACTC,MAAO,GACPC,MAAO,IAsE4BqB,SAE5B,SAAAuB,GAAA,IAAGC,EAAYD,EAAZC,aAAY,OACd1B,EAAAA,EAAAA,MAAA,QAAMC,UAAU,eAAeK,SAAUoB,EAAaxB,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAACwB,EAAAA,GAAe,KAChBxB,EAAAA,EAAAA,KAACyB,EAAAA,GAAS,QAEZ5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,gBAAc2B,OAAO/C,GAAYgD,QAAQ,GAAG,QAC/C3B,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAS9B,UAAU,qBAAoBC,SAAC,2BAIlD,OAIbC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAO,MAGd,C","sources":["pages/ShoppingCart/ShoppingCart.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport * as yup from \"yup\";\r\nimport { CredentialsForm, OrderList } from \"../../components\";\r\nimport \"./ShoppingCart.css\";\r\nimport { getBasket, getError } from \"../../redux/selectors\";\r\nimport { Toaster, toast } from \"react-hot-toast\";\r\nimport { createOrder } from \"../../redux/basket/operations\";\r\nimport { removeOrder } from \"../../redux/basket/sliceBasket\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst ShoppingCart = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(),\r\n    address: yup.string().required(),\r\n    phone: yup.string().required(),\r\n    email: yup.string().email().required(),\r\n    totalPrice: yup.number(),\r\n    date: yup.date(),\r\n    products: yup.array().of(\r\n      yup.object().shape({\r\n        name: yup.string(),\r\n        price: yup.number(),\r\n        photo: yup.string(),\r\n        quantity: yup.number(),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  };\r\n\r\n  const basket = useSelector(getBasket);\r\n  const error = useSelector(getError);\r\n  const totalPrice = basket.reduce(\r\n    (accumulator, item) => accumulator + item.price,\r\n    0\r\n  );\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    const { name, address, phone, email } = values;\r\n\r\n    const order = basket.map((item) => {\r\n      const updatedItem = { ...item };\r\n      delete updatedItem._id;\r\n      delete updatedItem.initialPrice;\r\n      return updatedItem;\r\n    });\r\n\r\n    if (totalPrice === 0) {\r\n      notifyError();\r\n      return;\r\n    }\r\n\r\n    schema\r\n      .validate({\r\n        name,\r\n        address,\r\n        phone,\r\n        email,\r\n        totalPrice,\r\n        products: order,\r\n        date: new Date().toLocaleDateString(),\r\n      })\r\n      .then(() => {\r\n        dispatch(\r\n          createOrder({\r\n            name,\r\n            address,\r\n            phone,\r\n            email,\r\n            totalPrice,\r\n            products: order,\r\n            date: new Date().toLocaleDateString(),\r\n          })\r\n        );\r\n        if (!error) {\r\n          dispatch(removeOrder());\r\n        }\r\n        resetForm();\r\n        notify();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        notifyError();\r\n      });\r\n  };\r\n\r\n  const notify = () =>\r\n    toast.success(`Your order is being processed, we will contact you soon`);\r\n\r\n  const notifyError = () => toast.error(\"Something went wrong with the order\");\r\n\r\n  return (\r\n    <section className=\"shoppingCart\">\r\n      <div className=\"container\">\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          initialValues={initialValues}\r\n        >\r\n          {({ handleSubmit }) => (\r\n            <form className=\"basket__form\" onSubmit={handleSubmit}>\r\n              <div className=\"basket__form-wrapper\">\r\n                <CredentialsForm />\r\n                <OrderList />\r\n              </div>\r\n              <div className=\"basket__totalprice\">\r\n                <p>Total price: {Number(totalPrice).toFixed(2)}$</p>\r\n                <button type=\"submit\" className=\"basket__submit-btn\">\r\n                  Pay for the order\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <Toaster />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ShoppingCart;\r\n"],"names":["dispatch","useDispatch","schema","yup","shape","name","required","address","phone","email","totalPrice","date","products","of","price","photo","quantity","basket","useSelector","getBasket","error","getError","reduce","accumulator","item","notify","toast","notifyError","_jsxs","className","children","_jsx","Formik","validationSchema","onSubmit","values","_ref","resetForm","order","map","updatedItem","_objectSpread","_id","initialPrice","validate","Date","toLocaleDateString","then","createOrder","removeOrder","catch","console","initialValues","_ref2","handleSubmit","CredentialsForm","OrderList","Number","toFixed","type","Toaster"],"sourceRoot":""}